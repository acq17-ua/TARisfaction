// Generated by gencpp from file p2pkg/p2mensaje.msg
// DO NOT EDIT!


#ifndef P2PKG_MESSAGE_P2MENSAJE_H
#define P2PKG_MESSAGE_P2MENSAJE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace p2pkg
{
template <class ContainerAllocator>
struct p2mensaje_
{
  typedef p2mensaje_<ContainerAllocator> Type;

  p2mensaje_()
    : numero(0)
    , posicion()
    , fecha()  {
    }
  p2mensaje_(const ContainerAllocator& _alloc)
    : numero(0)
    , posicion(_alloc)
    , fecha(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _numero_type;
  _numero_type numero;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _posicion_type;
  _posicion_type posicion;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fecha_type;
  _fecha_type fecha;





  typedef boost::shared_ptr< ::p2pkg::p2mensaje_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p2pkg::p2mensaje_<ContainerAllocator> const> ConstPtr;

}; // struct p2mensaje_

typedef ::p2pkg::p2mensaje_<std::allocator<void> > p2mensaje;

typedef boost::shared_ptr< ::p2pkg::p2mensaje > p2mensajePtr;
typedef boost::shared_ptr< ::p2pkg::p2mensaje const> p2mensajeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p2pkg::p2mensaje_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p2pkg::p2mensaje_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::p2pkg::p2mensaje_<ContainerAllocator1> & lhs, const ::p2pkg::p2mensaje_<ContainerAllocator2> & rhs)
{
  return lhs.numero == rhs.numero &&
    lhs.posicion == rhs.posicion &&
    lhs.fecha == rhs.fecha;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::p2pkg::p2mensaje_<ContainerAllocator1> & lhs, const ::p2pkg::p2mensaje_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace p2pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::p2pkg::p2mensaje_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p2pkg::p2mensaje_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p2pkg::p2mensaje_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p2pkg::p2mensaje_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p2pkg::p2mensaje_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p2pkg::p2mensaje_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p2pkg::p2mensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e76c1ca9ea3c78b71e71cf7428e9560";
  }

  static const char* value(const ::p2pkg::p2mensaje_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e76c1ca9ea3c78bULL;
  static const uint64_t static_value2 = 0x71e71cf7428e9560ULL;
};

template<class ContainerAllocator>
struct DataType< ::p2pkg::p2mensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p2pkg/p2mensaje";
  }

  static const char* value(const ::p2pkg::p2mensaje_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p2pkg::p2mensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 numero\n"
"geometry_msgs/Pose posicion\n"
"string fecha\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::p2pkg::p2mensaje_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p2pkg::p2mensaje_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.numero);
      stream.next(m.posicion);
      stream.next(m.fecha);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct p2mensaje_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p2pkg::p2mensaje_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p2pkg::p2mensaje_<ContainerAllocator>& v)
  {
    s << indent << "numero: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numero);
    s << indent << "posicion: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.posicion);
    s << indent << "fecha: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fecha);
  }
};

} // namespace message_operations
} // namespace ros

#endif // P2PKG_MESSAGE_P2MENSAJE_H
